@using PersonerosWeb.Models;
@using PersonerosWeb.Resourses;
@model Persona
@{
    ViewBag.Title = (Model.idPersona > 0 ? "Editar" : "Agregar") + " Persona";
    Layout = null;

    List<SelectListItem> distritos = (List<SelectListItem>)ViewBag.distritos;
    List<SelectListItem> instituciones = (List<SelectListItem>)ViewBag.instituciones;

}

@using(Html.BeginForm("GuardarPersona", "Persona", FormMethod.Post, new { @class = "needs-validation", @novalidate = "novalidate" })) {
    @Html.HiddenFor(m => m.idPersona)
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-10">
                    <div class="form-floating mb-3">
                        @Html.TextBoxFor(model => model.dni, null, new { @class = "form-control", @placeholder = "Documento de Identidad", @required = "required", @autocomplete = "off", @minlength= "8",  @maxlength = "8", @type = "tel", @pattern = "[0-9]+", @onkeypress = "return valideKeyNumber(event);" })
                        @Html.LabelFor(model => model.dni)
                        <div class="invalid-feedback">Algo está mal!</div>
                        @Html.ValidationMessageFor(model => model.dni, null, new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-2">
                    <button type=button id="buscarPersonaReniec" class="btn btn-secondary btn-lg mb-3"><i class='bx bx-search-alt-2'></i></button>
                </div>
            </div>
            <div class="form-floating mb-3">
                @Html.TextBoxFor(model => model.nombres, null, new { @class = "form-control", @placeholder = "Nombres", @required = "required", @autocomplete = "off", @maxlength = "75" })
                @Html.LabelFor(model => model.nombres)
                <div class="invalid-feedback">Algo está mal!</div>
                @Html.ValidationMessageFor(model => model.nombres, null, new { @class = "text-danger" })
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-floating mb-3">
                        @Html.TextBoxFor(model => model.apellidoPaterno, null, new { @class = "form-control", @placeholder = "Apellido Paterno", @required = "required", @autocomplete = "off", @maxlength = "75" })
                        @Html.LabelFor(model => model.apellidoPaterno)
                        <div class="invalid-feedback">Algo está mal!</div>
                        @Html.ValidationMessageFor(model => model.apellidoPaterno, null, new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col">
                    <div class="form-floating mb-3">
                        @Html.TextBoxFor(model => model.apellidoMaterno, null, new { @class = "form-control", @placeholder = "Apellido Materno", @autocomplete = "off", @maxlength = "75" })
                        @Html.LabelFor(model => model.apellidoMaterno)
                        <div class="invalid-feedback">Algo está mal!</div>
                        @Html.ValidationMessageFor(model => model.apellidoMaterno, null, new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-floating mb-3">
                @Html.TextBoxFor(model => model.celular, null, new { @class = "form-control", @placeholder = "Teléfono/Celular", @required = "required", @autocomplete = "off", @maxlength = "12" })
                @Html.LabelFor(model => model.celular)
                <div class="invalid-feedback">Algo está mal!</div>
                @Html.ValidationMessageFor(model => model.celular, null, new { @class = "text-danger" })
            </div>
            <div class="form-floating mb-3">
                @Html.TextBoxFor(model => model.direccion, null, new { @class = "form-control", @placeholder = "Dirección", @required = "required", @autocomplete = "off", @maxlength = "255" })
                @Html.LabelFor(model => model.direccion)
                <div class="invalid-feedback">Algo está mal!</div>
                @Html.ValidationMessageFor(model => model.direccion, null, new { @class = "text-danger" })
            </div>
            <div class="form-floating mb-3">
                @Html.DropDownListFor(model => model.distritoResidencia.idDistrito, distritos, new { @class = "form-select", @required = "required", @autocomplete = "off" })
                @*@Html.LabelFor(model => model.idDistritoDireccion)*@
                <div class="invalid-feedback">Algo está mal!</div>
                @Html.ValidationMessageFor(model => model.distritoResidencia.idDistrito, null, new { @class = "text-danger" })
            </div>
            <div class="form-floating mb-3">
                @Html.DropDownListFor(model => model.institucionVotacion.idInstitucion, instituciones, new { @class = "form-select", @required = "required", @autocomplete = "off" })
                @*@Html.LabelFor(model => model.idInstitucionVotacion)*@
                <div class="invalid-feedback">Algo está mal!</div>
                @Html.ValidationMessageFor(model => model.institucionVotacion.idInstitucion, null, new { @class = "text-danger" })
            </div>
            <div class="row">
                <div class="col d-grid">
                    <button @*data-bs-dismiss="modal"*@ type="submit" class="btn btn-primary btn-lg">Guardar</button>
                </div>
                <div class="col d-grid">
                    <a data-bs-dismiss="modal" class="btn btn-danger btn-lg">Cancelar</a>
                </div>
            </div>
        </div>
    </div>
}
<script src="~/Assets/js/validation/validation.bootstrap.js"></script>
<script type="text/javascript">
    crearComboBusqueda($('#distritoResidencia_idDistrito'), 'Seleccione Distrito de Residencia', $('#modalPersona'))
    crearComboBusqueda($('#institucionVotacion_idInstitucion'), 'Seleccione una Institución de Votación', $('#modalPersona'))

    //para buscar la persona
    var txtDni = document.getElementById("dni");
    var btnBuscarPersonReniec = document.getElementById("buscarPersonaReniec");

    btnBuscarPersonReniec.addEventListener("click", function (event) {
        let dni = txtDni.value;
        var longitudDni = dni.length;
        //valida que se haya escrito algo
        if (dni == undefined || dni == "" || dni == null) {
            Swal.fire("Error", "Tiene ingresar un Número de Documento para buscar", "error")
            return;
        }

        //valida que tenga 8 digitos
        if (longitudDni != 8) {
            Swal.fire("Error", "Tiene ingresar 8 digitos para realizar la busqueda", "error")
            return;
        }

        var base = "https://dniruc.apisperu.com/api/v1/dni/"
        var token = "?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6InByb21vMjAxNjc0QGdtYWlsLmNvbSJ9.SDxqQGi2nMScGlxP_EP6TXOo-mwksYzZgA4y-GvB5oc"

        var url = base + dni + token;

        Swal.fire({
            //title: `Buscando datos del DNI ${dni}`,
            title: "Buscando datos del DNI " + dni,
            didOpen: () => {
                Swal.showLoading();
            }
        });
        fetch(url).then(request => request.text())
            .then(data => {
                var seEncontro = completarDatos(data)
                Swal.close();
                if (!seEncontro) {
                    Swal.fire("Error", `No se encontraron datos del DNI ${dni}, ingreselos manualmente`, "error")
                }
            });

        function completarDatos(data) {
            var persona = JSON.parse(data);
            try {
                var nombres = capitalizeWords(persona.nombres);
                var apellidoPaterno = capitalizeWords(persona.apellidoPaterno);
                var apellidoMaterno = capitalizeWords(persona.apellidoMaterno);

                var txtNombres = document.getElementById("nombres");
                var txtApellidoPaterno = document.getElementById("apellidoPaterno");
                var txtApellidoMaterno = document.getElementById("apellidoMaterno");

                txtNombres.value = nombres;
                txtApellidoPaterno.value = apellidoPaterno;
                txtApellidoMaterno.value = apellidoMaterno;
                return true;
            } catch (e) {
                return false;
            }
        }
    });
</script>