@using PersonerosWeb.Resourses;
@using PersonerosWeb.Models;
@{
    ViewBag.Title = "Asignar Responsabilidades";
    List<SelectListItem> tiposUsuario = (List<SelectListItem>)ViewBag.tiposUsuario;
    List<SelectListItem> instituciones = (List<SelectListItem>)ViewBag.instituciones;
    ViewBag.urlBase = Recursos.baseUrlApi;

    ViewBag.messageAlert = Session["messageAlert"];
    ViewBag.titleAlert = Session["titleAlert"];
    ViewBag.iconAlert = Session["iconAlert"];

    //separado por persona (enlace)

    //separado por normalito (coordinador)

    //separado por institucion (personero)
    IEnumerable<IGrouping<string, DesignacionMesa>> designacionPersoneros = (IEnumerable<IGrouping<string, DesignacionMesa>>)ViewBag.designacionPersoneros;
}

<div class="row mt-3">
    <div class="col text-black">
        <h2 class="text-center">@ViewBag.Title</h2>
        <hr />
    </div>
</div>
@using(Html.BeginForm("Agregar", "Asignar", FormMethod.Post, new { @class = "needs-validation", @novalidate = "novalidate" })) {
    @*@Html.HiddenFor(m => m.idDesignacionMesa)*@
    <div class="card">
        <div class="card-body">
            <div class="row">
                <fieldset class="col">
                    <legend>Usuario</legend>
                    <div class="form-floating mb-3">
                        @Html.DropDownList("idTipoUsuario", tiposUsuario, new { @class = "form-select", @required = "required" })
                        @*@Html.LabelFor(model => model.idInstitucionVotacion)*@
                        <div class="invalid-feedback">Algo está mal!</div>
                    </div>
                    <div class="form-floating mb-3">
                        @Html.DropDownList("idUsuario", new List<SelectListItem>(), new { @class = "form-select", @required = "required" })
                        @*@Html.LabelFor(model => model.idInstitucionVotacion)*@
                        <div class="invalid-feedback">Algo está mal!</div>
                    </div>
                </fieldset>

                <fieldset class="col">
                    <legend>Institución - Mesa</legend>
                    <div class="form-floating mb-3" id="divInstituciones">
                        @Html.DropDownList("idInstitucion", instituciones, new { @class = "form-select", @required = "required" })
                        @*@Html.LabelFor(model => model.idInstitucionVotacion)*@
                        <div class="invalid-feedback">Algo está mal!</div>
                    </div>
                    <div class="form-floating mb-3" id="divMesas">
                        @Html.DropDownList("idMesa", new List<SelectListItem>(), new { @class = "form-select", @required = "required" })
                        @*@Html.LabelFor(model => model.idInstitucionVotacion)*@
                        <div class="invalid-feedback">Algo está mal!</div>
                    </div>
                </fieldset>
            </div>

            <div class="row">
                <div class="col align-self-center">
                    <button @*data-bs-dismiss="modal"*@ type="submit" class="col-12 btn btn-primary btn-lg">Guardar</button>
                </div>
                <div class="col align-self-center">
                    <a data-bs-dismiss="modal" class="col-12 btn btn-danger btn-lg">Cancelar</a>
                </div>
            </div>
        </div>
    </div>
}
<script src="~/Assets/js/validation/validation.bootstrap.js"></script>
<script type="text/javascript">
    //COMBOS
    var cmbTipoUsuario = $('#idTipoUsuario');
    var cmbUsuario = $('#idUsuario');
    var cmbInstitucion = $('#idInstitucion');
    var cmbMesa = $('#idMesa');

    //DIVS
    var divMesas = document.getElementById('divMesas');
    var divInstituciones = document.getElementById('divInstituciones');

    //variables globales
    var urlbase = "https://personerosbackend.herokuapp.com/";

    //variables para los id selccionados de los divcersos combos
    var idUsuarioSeleccionado = 0;
    var idTipoUsuarioSeleccionado = 0;
    var idInstitucionSeleccionada = 0;
    var idMesaSelccionada = 0;

    //para las cantidades maximas
    var maxMesa;
    var maxInstitucion;

    //variables para los objetos
    var usuarios;
    var instituciones;
    var mesas;
    var institucionesData;

    $(document).ready(function () {

        instituciones = @Html.Raw(Json.Encode(ViewBag.instituciones));

        institucionesData = armarObjetoInstituciones(instituciones);

        //creacion de combos
        crearComboBusqueda(cmbTipoUsuario, 'Seleccione un Tipo de Usuario');
        crearComboBusqueda(cmbUsuario, 'Selecicone un Usuario');
        crearComboBusqueda(cmbInstitucion, 'Seleccione una Institución');
        crearComboBusqueda(cmbMesa, 'Seleccione una Mesa');

        //limpieza de seleccion de combos
        limpiarSeleccion(cmbTipoUsuario)
        limpiarSeleccion(cmbUsuario)
        limpiarSeleccion(cmbInstitucion)
        limpiarSeleccion(cmbMesa)

        //eventos
        $('#idTipoUsuario').on('select2:select', function (e) {
            var data = e.params.data;
            idTipoUsuarioSeleccionado = data.id;

            limpiarCombo(cmbUsuario);
            mostrarAlertBusqueda("Buscando usuarios del tipo " + data.text);
            fetchUsersByUserTypeId(idTipoUsuarioSeleccionado).then(users => {
                usuarios = users
                var cantidadUsuarios = usuarios.length;
                if (cantidadUsuarios >= 1) {
                    var datos = armarObjetoUsuario(usuarios);
                    //aca se cargan los nuevos elementos al combo
                    crearComboBusqueda(cmbUsuario, 'Seleccione un Usuario', '', datos)
                    //limpiarSeleccion(cmbUsuario)
                    Swal.fire("Bien", `Se encontrarón ${cantidadUsuarios} usuarios del tipo ${data.text}`, "success")
                } else {
                    Swal.fire("Error", `No se encontraron usuarios del tipo ${data.text}, primero cree uno`, "error")
                }
            });
            asignarComboInstitucionMesa(idTipoUsuarioSeleccionado);
        });

        $('#idUsuario').on('select2:select', function (e) {
            var data = e.params.data;
            idUsuarioSeleccionado = data.id;
            maxMesa = obtenerCantidadMaximaMesas(idUsuarioSeleccionado);
            maxInstitucion = obtenerCantidadMaximaInstituciones(idUsuarioSeleccionado);

            limpiarCombo(cmbInstitucion)
            if (idTipoUsuarioSeleccionado == ID_USUARIO_PERSONERO) {
                crearComboBusqueda(cmbInstitucion, "Seleccione una institucion", '', institucionesData, false, maxInstitucion);
                crearComboBusqueda(cmbMesa, "Seleccione una o más mesas", '', '', true, maxMesa);
            } else if (idTipoUsuarioSeleccionado == ID_USUARIO_ENLACE || idTipoUsuarioSeleccionado == ID_USUARIO_COORDINADOR) {
                crearComboBusqueda(cmbInstitucion, "Seleccione una o más instituciones", '', institucionesData, true, maxInstitucion);
            }

            console.log("maxMesa => " + maxMesa)
            console.log("maxInstitucion => " + maxInstitucion)
        });

        $('#idInstitucion').on('select2:select', function (e) {
            var data = e.params.data;
            idInstitucionSeleccionada = data.id;

            if (idTipoUsuarioSeleccionado == ID_USUARIO_ENLACE || idTipoUsuarioSeleccionado == ID_USUARIO_COORDINADOR) {
                return;
            }



            limpiarCombo(cmbMesa);
            mostrarAlertBusqueda("Buscando mesas de la institución " + data.text);
            fetchMesasByInstitucionId(idInstitucionSeleccionada).then(tables => {
                mesas = tables;
                var cantidadMesas = mesas.length;
                if (cantidadMesas >= 1) {
                    var datos = armarObjetoMesa(mesas);
                    if (idUsuarioSeleccionado != 0) {
                        crearComboBusqueda(cmbMesa, "Seleccione una o más mesas", '', datos, true, maxMesa)
                    }
                    Swal.fire("Bien", `Se encontrarón ${cantidadMesas} mesas`, "success")
                } else {
                    Swal.fire("Error", `No se encontraron mesas de la institución ${data.text}, primero cree una`, "error")
                }
            });
        });
    });

    //BUSQUEDAS DE DATOS
    async function fetchUsersByUserTypeId(idTipoUsuario) {
        var endpoint = "api/Usuario/TipoUsuario/";
        var url = urlbase + endpoint + idTipoUsuario;
        const response = await fetch(url);
        const result = await response.json();
        const users = await result.result;
        return users;
    }

    async function fetchMesasByInstitucionId(idInstitucion) {
        var endpoint = "api/Mesa/Institucion/";
        var url = urlbase + endpoint + idInstitucion;
        const response = await fetch(url);
        const result = await response.json();
        const tables = await result.result;
        return tables;
    }

    //ARMANDO OBJETOS DE COMBOS
    function armarObjetoUsuario(usuarios) {
        let nombres = usuarios.map(x => ({
            id: x.idUsuario,
            text: x.persona.nombres + " " + x.persona.apellidoPaterno + " " + x.persona.apellidoMaterno,
            selected: false
        }));

        return nombres;
    }

    function armarObjetoMesa(mesas) {
        let numeros = mesas.map(x => ({
            id: x.idMesa,
            text: x.numero,
            selected: false
        }));

        return numeros;
    }

    function armarObjetoInstituciones(instituciones) {
        let distritosUnicos = obtenerElementosUnicos(instituciones)
        let nombres = distritosUnicos.map(x => ({
            text: x,
            children: crearObjetoInstitucion(x, instituciones)
        }));
        return nombres;
    }

    function crearObjetoInstitucion(distrito, instituciones) {
        return instituciones.filter(x => x.Group.Name == distrito).map(y => ({
            id: y.Value,
            text: y.Text,
            selected: false
        }));
    }

    //FILTROS UNICOS
    function obtenerElementosUnicos(instituciones){
        let todosDesignacionMesas = instituciones.map(item => {
            return item.Group.Name;
        });
        const dataArr = new Set(todosDesignacionMesas);
        let distritos = [...dataArr];
        return distritos;
    }

    //OCULTANDO O MOSTRANDO LOS COMBOS
    function asignarComboInstitucionMesa(idTipoUsuario) {
        limpiarCombo(cmbInstitucion);
        switch (parseInt(idTipoUsuario)) {
            case ID_USUARIO_PERSONERO:
                mostrarElemento(divMesas)
                cmbMesa.attr("required","required")
                crearComboBusqueda(cmbInstitucion, "Seleccione una Institución", '', institucionesData, false)
                break;
            case ID_USUARIO_COORDINADOR:
                ocultarElemento(divMesas)
                cmbMesa.removeAttr("required")
                crearComboBusqueda(cmbInstitucion, "Seleccione una o más instituciones", '', institucionesData, true)
                break;
            case ID_USUARIO_ENLACE:
                ocultarElemento(divMesas);
                cmbMesa.removeAttr("required")
                crearComboBusqueda(cmbInstitucion, "Seleccione una o más instituciones", '', institucionesData, true)
                break;
        }
        //limpiarCombo(cmbInstitucion)
        limpiarSeleccion(cmbInstitucion);
        limpiarCombo(cmbMesa);
    }

    function fetchUserById(idUsuario) {
        return usuarios.find(x => x.idUsuario == idUsuario)
    }

    //PARA OBTENER MAXIMOS
    function obtenerCantidadMaximaInstituciones(idUsuario) {
        var cantidadMaxima = fetchUserById(idUsuario).cantidadMaximaInstituciones
        return cantidadMaxima;
    }

    function obtenerCantidadMaximaMesas(idUsuario) {
        var cantidadMaxima = fetchUserById(idUsuario).cantidadMaximaMesas
        return cantidadMaxima;
    }

    //para las alertas
    let titulo = "@ViewBag.titleAlert";
    let mensaje = "@ViewBag.messageAlert";
    let tipo = "@ViewBag.iconAlert";

    function mostrar() {
        Swal.fire(titulo, mensaje, tipo)
    }

    function limpiar() {
        @{
            Session["titleAlert"] = "";
            Session["messageAlert"] = "";
            Session["iconAlert"] = "";
            ViewBag.titleAlert = "";
            ViewBag.messageAlert = "";
            ViewBag.iconAlert = "";
        }
        titulo = ""
        mensaje = ""
        tipo = ""
    }

    if (titulo != "") {
        mostrar()
        limpiar()
    }
</script>


<div class="project-description">

    @*<h4>Descripción de proyecto</h4>*@
    <ul class="nav nav-pills pb-3" id="pills-tab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="pills-enlaces-tab" data-bs-toggle="pill" data-bs-target="#pills-enlaces" type="button" role="tab" aria-controls="pills-enlaces" aria-selected="false">
                Enlaces
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="pills-coordinadores-tab" data-bs-toggle="pill" data-bs-target="#pills-coordinadores" type="button" role="tab" aria-controls="pills-coordinadores" aria-selected="false">
                Coordinadores
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="pills-personeros-tab" data-bs-toggle="pill" data-bs-target="#pills-personeros" type="button" role="tab" aria-controls="pills-personeros" aria-selected="false">
                Personeros
            </button>
        </li>
    </ul>

    <div class="tab-content" id="pills-tabContent">
        <div class="tab-pane fade show active" id="pills-enlaces" role="tabpanel" aria-labelledby="pills-enlaces-tab">
            <div class="col-12 table-responsive mt-2 mx-auto">
                Aca lo de enlaces
            </div>
        </div>
        <div class="tab-pane fade" id="pills-coordinadores" role="tabpanel" aria-labelledby="pills-coordinadores-tab">
            <div class="col-12 table-responsive mt-2 mx-auto">
                Aca lo de coordinadores
            </div>
        </div>
        <div class="tab-pane fade" id="pills-personeros" role="tabpanel" aria-labelledby="pills-personeros-tab">
            <div class="col-12 table-responsive mt-2 mx-auto">
                @foreach(var institucion in designacionPersoneros) {
                    <div class="rounded-3 border border-secondary m-3 p-3 bg-light">
                        <div class="col-12 table-responsive mx-auto">
                            <h3 class="col mb-3 text-center fw-bold">@institucion.Key</h3>
                            <table id="table1" class="display table table-striped align-middle">
                                @*<caption>@ViewBag.captionTable</caption>*@
                                <thead style="text-align: center;">
                                    <tr>
                                        <th scope="col">N°</th>
                                        <th scope="col">N° Mesa</th>
                                        <th scope="col">Nombres</th>
                                        <th scope="col">Teléfono/Celular</th>
                                        <th scope="col">Acción</th>
                                    </tr>
                                </thead>
                                <tbody style="vertical-align:middle; text-align: center;">
                                    @{
                                        int i = 1;
                                        int cantidadMesas = 0;
                                    }
                                    @foreach(var personero in institucion) {
                                        <tr>
                                            <td>@i</td>
                                            <td>@personero.mesa.numero</td>
                                            <td>@personero.usuario.persona.nombres @personero.usuario.persona.apellidoPaterno, @personero.usuario.persona.apellidoMaterno</td>
                                            <td>@personero.usuario.persona.celular</td>
                                            <td>
                                                <button class="btn btn-primary btnDetalleDesignacionMesa" type="button" data-id="@personero.idDesignacionMesa" data-bs-title="Detalle del Personero" data-bs-target="#modalDesignacionMesa" data-bs-toggle="modal">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                                                        <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z" />
                                                        <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z" />
                                                    </svg>
                                                </button>
                                                <button class="btn btn-success btnModificarDesignacionMesa" type="button" data-id="@personero.idDesignacionMesa" data-bs-title="Actualizar Personero" data-bs-target="#modalDesignacionMesa" data-bs-toggle="modal">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                                        <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                                        <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
                                                    </svg>
                                                </button>
                                                <button class="btn btn-danger btnEliminarDesignacionMesa" type="button" data-id="@personero.idDesignacionMesa" data-bs-title="Eliminar Personero" data-bs-target="#modalDesignacionMesa" data-bs-toggle="modal">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                                        <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                                                    </svg>
                                                </button>
                                            </td>
                                        </tr>
                                        i++;
                                        cantidadMesas = personero.mesa.institucion.cantidadMesas;
                                    }
                                    @for(int j = i; j <= cantidadMesas; j++) {
                                        <tr>
                                            <td>@j</td>
                                            <td>-</td>
                                            <td>-</td>
                                            <td>-</td>
                                            <td>-</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
            </div>
            <div class="modal fade" id="modalDesignacionMesa" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="modalCourseTitle"></h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div id="modalDesignacionMesaContenido"></div>@* Contenido del Modal *@
                        </div>
                    </div>
                </div>
            </div>
            @*<script src="~/Assets/js/models/designacionInstitucion.js"></script>*@
            <script src="~/Assets/js/models/designacionMesa.js"></script>
        </div>
        <div class="tab-pane fade" id="pills-reporte" role="tabpanel" aria-labelledby="pills-reporte-tab">
            <div id="container"></div>
        </div>
    </div>
</div>